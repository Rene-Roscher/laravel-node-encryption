name: Laravel Compatibility

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - '.github/workflows/**'
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Laravel ${{ matrix.laravel }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - laravel: 10
            php: 8.2
          - laravel: 11
            php: 8.3

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: mbstring, xml, json
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install package dependencies
      run: npm install

    - name: Test Laravel ${{ matrix.laravel }}
      run: |
        # Create temporary test directory
        mkdir test-laravel
        cd test-laravel

        # Create minimal Laravel test project
        composer init --name=test/app --type=project --no-interaction
        composer require laravel/framework:"^${{ matrix.laravel }}.0" laravel/tinker --no-interaction

        # Create minimal Laravel bootstrap
        mkdir -p bootstrap/cache config

        # Create app key
        APP_KEY="base64:$(openssl rand -base64 32)"

        # Create config/app.php
        cat > config/app.php << 'PHP'
        <?php
        return [
            'key' => env('APP_KEY'),
            'cipher' => 'aes-256-cbc',
        ];
        PHP

        # Create .env
        echo "APP_KEY=$APP_KEY" > .env

        # Create bootstrap file
        cat > bootstrap.php << 'PHP'
        <?php
        require 'vendor/autoload.php';
        $app = new \Illuminate\Foundation\Application(dirname(__DIR__));
        $app->singleton(\Illuminate\Contracts\Console\Kernel::class, \Illuminate\Foundation\Console\Kernel::class);
        $app->singleton(\Illuminate\Contracts\Debug\ExceptionHandler::class, \Illuminate\Foundation\Exceptions\Handler::class);
        return $app;
        PHP

        # Install our package
        npm install ../

        # Create test script
        cat > test.php << 'PHP'
        <?php
        putenv('APP_KEY=' . trim(file_get_contents('.env'), "APP_KEY=\n"));
        require 'vendor/autoload.php';

        use Illuminate\Encryption\Encrypter;
        use Illuminate\Support\Facades\Facade;

        $app = require 'bootstrap.php';
        $app['config'] = new \Illuminate\Config\Repository(['app' => require 'config/app.php']);
        $app->instance('encrypter', new Encrypter(substr(getenv('APP_KEY'), 7), 'aes-256-cbc'));
        Facade::setFacadeApplication($app);

        // Test cases
        $tests = [
            'string' => 'Hello World',
            'number' => 42,
            'array' => ['test' => 'value'],
            'bool' => true,
            'null' => null
        ];

        $passed = 0;
        $failed = 0;

        foreach ($tests as $type => $value) {
            // PHP to Node
            $encrypted = $app['encrypter']->encrypt($value);
            $nodeCode = sprintf("
                process.env.APP_KEY = '%s';
                const { LaravelEncrypter } = require('laravel-node-encryption');
                const enc = new LaravelEncrypter();
                try {
                    const result = enc.decrypt('%s');
                    console.log(JSON.stringify({success: true, type: '%s'}));
                } catch (e) {
                    console.log(JSON.stringify({success: false, error: e.message, type: '%s'}));
                    process.exit(1);
                }
            ", getenv('APP_KEY'), $encrypted, $type, $type);

            file_put_contents('test.cjs', $nodeCode);
            $output = shell_exec('node test.cjs 2>&1');
            $result = json_decode($output, true);

            if ($result && $result['success']) {
                echo "✅ PHP->Node [$type] passed\n";
                $passed++;
            } else {
                echo "❌ PHP->Node [$type] failed\n";
                $failed++;
            }

            // Node to PHP
            $nodeCode = sprintf("
                process.env.APP_KEY = '%s';
                const { LaravelEncrypter } = require('laravel-node-encryption');
                const enc = new LaravelEncrypter();
                const encrypted = enc.encrypt(%s);
                console.log(encrypted);
            ", getenv('APP_KEY'), json_encode($value));

            file_put_contents('encrypt.cjs', $nodeCode);
            $nodeEncrypted = trim(shell_exec('node encrypt.cjs 2>&1'));

            try {
                $decrypted = $app['encrypter']->decrypt($nodeEncrypted);
                echo "✅ Node->PHP [$type] passed\n";
                $passed++;
            } catch (Exception $e) {
                echo "❌ Node->PHP [$type] failed: " . $e->getMessage() . "\n";
                $failed++;
            }
        }

        echo "\n📊 Results: $passed passed, $failed failed\n";
        exit($failed > 0 ? 1 : 0);
        PHP

        # Run test
        php test.php